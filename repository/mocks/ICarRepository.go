// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "chapter3_2/models"

	mock "github.com/stretchr/testify/mock"
)

// ICarRepository is an autogenerated mock type for the ICarRepository type
type ICarRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: newCar
func (_m *ICarRepository) Add(newCar models.Car) (models.Car, error) {
	ret := _m.Called(newCar)

	var r0 models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Car) (models.Car, error)); ok {
		return rf(newCar)
	}
	if rf, ok := ret.Get(0).(func(models.Car) models.Car); ok {
		r0 = rf(newCar)
	} else {
		r0 = ret.Get(0).(models.Car)
	}

	if rf, ok := ret.Get(1).(func(models.Car) error); ok {
		r1 = rf(newCar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: carID
func (_m *ICarRepository) Delete(carID string) error {
	ret := _m.Called(carID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(carID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *ICarRepository) Get() ([]models.Car, error) {
	ret := _m.Called()

	var r0 []models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Car, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Car); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: CarID
func (_m *ICarRepository) GetOne(CarID string) (models.Car, error) {
	ret := _m.Called(CarID)

	var r0 models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Car, error)); ok {
		return rf(CarID)
	}
	if rf, ok := ret.Get(0).(func(string) models.Car); ok {
		r0 = rf(CarID)
	} else {
		r0 = ret.Get(0).(models.Car)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(CarID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updateCar, carId
func (_m *ICarRepository) Update(updateCar models.Car, carId string) (models.Car, error) {
	ret := _m.Called(updateCar, carId)

	var r0 models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Car, string) (models.Car, error)); ok {
		return rf(updateCar, carId)
	}
	if rf, ok := ret.Get(0).(func(models.Car, string) models.Car); ok {
		r0 = rf(updateCar, carId)
	} else {
		r0 = ret.Get(0).(models.Car)
	}

	if rf, ok := ret.Get(1).(func(models.Car, string) error); ok {
		r1 = rf(updateCar, carId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICarRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICarRepository creates a new instance of ICarRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICarRepository(t mockConstructorTestingTNewICarRepository) *ICarRepository {
	mock := &ICarRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
